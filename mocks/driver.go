// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/flohansen/go-mysql-pool (interfaces: Driver)
//
// Generated by this command:
//
//	mockgen -destination=mocks/driver.go -package=mocks github.com/flohansen/go-mysql-pool Driver
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	mysql "github.com/flohansen/go-mysql-pool"
	gomock "go.uber.org/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
	isgomock struct{}
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// CreateConnection mocks base method.
func (m *MockDriver) CreateConnection() (mysql.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnection")
	ret0, _ := ret[0].(mysql.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnection indicates an expected call of CreateConnection.
func (mr *MockDriverMockRecorder) CreateConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnection", reflect.TypeOf((*MockDriver)(nil).CreateConnection))
}
